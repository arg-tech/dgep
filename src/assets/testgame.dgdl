game(id:TestGame){

    roles(Role, Role2)
    participants(min:2, max:undefined)
    player(id:Test, min:2, max:2)
    player(id:Test2, roles(TestRole))

    store(id:TestStore, owner:Test, structure:set, visibility:public)

    turntaking(strict)
    backtracking(on)

    rule(id:TestRule, scope:initial){
        if(inrole(Test2, TestRole)){
          assign(Test2, speaker);
          move(add, next, TestMove, $Test, {p}, Test2);
          store(add, {"test"}, TestStore);
        }
    }

    interaction(id:TestMove, addressee:TestUser, content:{p}, opener:"Test, $p"){
      save({p}, $TestVar$);
      if(!inspect(in, {"xyz"}, TestStore) && !event(last, TestMove, {$TestVar$})){
        assign(Target, speaker);
        move(add, next, TestMove, $Test2, {$TestVar$}, Target);
      }
    }
}
